name: CI

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

jobs:

  setup:
    name: 'Setup and Tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
      - uses: actions/setup-node@v4
        name: Setup node 21.6
        with:
          node-version: 21.6
          cache: 'pnpm'
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: pnpm-${{ hashFiles('./pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ hashFiles('./pnpm-lock.yaml') }}
      - run: pnpm install
      - run: pnpm run prisma:generate
      - run: pnpm run test


  migrate:
    name: 'Migrate Database'
    runs-on: self-linux
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
      - uses: actions/setup-node@v4
        name: Setup node 21.6
        with:
          node-version: 21.6
      - name: Restore cache node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: pnpm-${{ hashFiles('./pnpm-lock.yaml') }}
      - name: Run Migrations
        env:
          DATABASE_URL: "${{ secrets.DATABASE_URL }}"
          PRISMA_LOG_LEVEL: "error"
        run: pnpm prisma migrate deploy | grep -v "Datasource "

  build:
    name: 'Build and Push'
    needs: migrate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume:  ${{ secrets.AWS_APP_RUNNER_ROLE }}
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
      - uses: actions/setup-node@v4
        name: Setup node 21.6
        with:
          node-version: 21.6
      - name: Restore cache node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: pnpm-${{ hashFiles('./pnpm-lock.yaml') }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Generate Tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: '${{ secrets.AWS_ROLE_TO_ASSUME }}'
          aws-region: '${{ secrets.AWS_REGION }}'
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build and Push docker image
        id: build-docker-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: node-nest-clean
          TAG: ${{ steps.generate_tag.outputs.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$TAG .
          docker tag $REGISTRY/$REPOSITORY:$TAG $REGISTRY/$REPOSITORY:latest
          docker push --all-tags $REGISTRY/$REPOSITORY
          IMAGE=$(echo $REGISTRY/$REPOSITORY:$TAG)
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Deploy to APP Runner
        run: aws apprunner update-service --service-arn ${{ secrets.AWS_APP_RUNNER_ARN }} --source-configuration ImageRepository="{ImageIdentifier=${{ steps.build-docker-image.outputs.image }},ImageRepositoryType=ECR}" --no-cli-pager > /dev/null 2>&1
