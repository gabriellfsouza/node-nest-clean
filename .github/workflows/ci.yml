name: CI

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

jobs:

  migrate:
    runs-on: self-linux
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
      - uses: actions/setup-node@v4
        name: Setup node 21.6
        with:
          node-version: 21.6
          cache: 'pnpm'
      # - name: Install Dependencies
      #   run: pnpm install
      - name: Run Migrations
        run: pnpm prisma migrate deploy
    needs: build

  build:
    name: 'Build and Push'
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node-version: [16, 18, 20, 21, 21.6]

    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v2
      with:
        version: 8.15.4
    - uses: actions/setup-node@v4
      # name: Setup node | ${{ matrix.node-version }}
      name: Setup node 21.6
      with:
        # node-version: ${{ matrix.node-version }}
        node-version: 21.6
        cache: 'pnpm'
    - run: pnpm install
    - run: pnpm run prisma:generate
    - run: pnpm run test

    - name: DB Push
      run: pnpm prisma migrate deploy

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Generate Tag
      id: generate_tag
      run: |
        SHA=$(echo $GITHUB_SHA | head -c7)
        echo "sha=$SHA" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: '${{ secrets.AWS_ROLE_TO_ASSUME }}'
        aws-region: '${{ secrets.AWS_REGION }}'
        mask-aws-account-id: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true

    - name: Build and Push docker image
      id: build-docker-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: node-nest-clean
        TAG: ${{ steps.generate_tag.outputs.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$TAG .
        docker push $REGISTRY/$REPOSITORY:$TAG
        docker tag $REGISTRY/$REPOSITORY:$TAG $REGISTRY/$REPOSITORY:latest
        docker push $REGISTRY/$REPOSITORY:latest
        IMAGE=$(echo $REGISTRY/$REPOSITORY:$TAG)
        echo "image=$IMAGE" >> $GITHUB_OUTPUT

    # - name: Deploy to APP Runner
    #   uses: awslabs/amazon-app-runner-deploy@main
    #   with:
    #     service: node-nest-clean
    #     image: ${{ steps.build-docker-image.outputs.image }}
    #     access-role-arn: '${{ secrets.AWS_APP_RUNNER_ROLE }}'
    #     region: '${{ secrets.AWS_REGION }}'
    #     cpu: 0.5
    #     memory: 1
    #     port: 3333
    #     wait-for-service-stability-seconds: 180

    - name: App Runner check
      run: echo "App Runner running... ${{ steps.deploy-to-app-runner.outputs.service-url }}"
